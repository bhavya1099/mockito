// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4-turbo
ROOST_METHOD_HASH=getNewBooksWithAppliedDiscount_3b7d0e9aa8
ROOST_METHOD_SIG_HASH=getNewBooksWithAppliedDiscount_c27afe90dc
Scenario 1: Applying Discount on Multiple New Books
Details:
  TestName: applyDiscountToMultipleNewBooks
  Description: This test checks if the correct discount is applied to multiple new books retrieved from the repository.
Execution:
  Arrange: Mock the BookRepository to return a list of books with predefined prices. Set a discount rate and the number of days.
  Act: Invoke getNewBooksWithAppliedDiscount with the specified discount rate and days.
  Assert: Verify that each book in the returned list has the price adjusted by the given discount rate.
Validation:
  Clarify what the assertion aims to verify: Ensure that the new price of each book is calculated correctly as per the discount rate.
  Elaborate on the significance of the test: This test ensures that the discount logic is correctly applied across multiple books, reflecting accurate pricing in the system.
Scenario 2: Applying Discount on an Empty List of New Books
Details:
  TestName: applyDiscountOnEmptyBookList
  Description: This test checks the behavior of the method when no new books are available (i.e., an empty list is returned by the repository).
Execution:
  Arrange: Mock the BookRepository to return an empty list of books. Set any discount rate and days.
  Act: Invoke getNewBooksWithAppliedDiscount with the specified discount rate and days.
  Assert: Verify that the returned list of books is empty.
Validation:
  Clarify what the assertion aims to verify: Ensure that the method handles empty lists properly without errors and returns an empty list.
  Elaborate on the significance of the test: This test confirms that the method can gracefully handle scenarios with no new books without breaking or altering application logic.
Scenario 3: Applying Zero Percent Discount
Details:
  TestName: applyZeroPercentDiscount
  Description: This test verifies the method's behavior when a zero percent discount is applied, ensuring that book prices remain unchanged.
Execution:
  Arrange: Mock the BookRepository to return a list of books with predefined prices. Set the discount rate to 0 and specify the number of days.
  Act: Invoke getNewBooksWithAppliedDiscount with the zero discount rate and days.
  Assert: Verify that each book in the returned list has the same price as the original.
Validation:
  Clarify what the assertion aims to verify: Check that the prices remain unchanged when a zero percent discount is applied.
  Elaborate on the significance of the test: Ensures that the method correctly applies a zero discount, which is crucial for maintaining pricing integrity under such conditions.
Scenario 4: Applying Negative Discount Rate
Details:
  TestName: applyNegativeDiscountRate
  Description: This test checks how the method handles a negative discount rate, which is not a typical scenario but might indicate a flaw or need for input validation.
Execution:
  Arrange: Mock the BookRepository to return a list of books. Set a negative discount rate and specify days.
  Act: Invoke getNewBooksWithAppliedDiscount with the negative discount rate and days.
  Assert: Verify that the method does not reduce prices further or throws an appropriate exception.
Validation:
  Clarify what the assertion aims to verify: Ensure that negative discounts do not corrupt pricing data.
  Elaborate on the significance of the test: Validates that the system is robust against incorrect input values, protecting the business logic from potential errors.
*/
// ********RoostGPT********
package com.hubberspot.mockito.annotations.support;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.mockito.Mockito;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.*;

@Tag("com.hubberspot.mockito.test_doubles.stub")
@Tag("com.hubberspot.mockito.test_doubles.stub.findNewBooks")
@Tag("com.hubberspot.mockito.behavior.verification")
@Tag("com.hubberspot.mockito.behavior.verification.getPrice")
@Tag("com.hubberspot.mockito.behavior.verification.setPrice")
@Tag("com.hubberspot.mockito.annotations.support")
@Tag("com.hubberspot.mockito.annotations.support.getNewBooksWithAppliedDiscount")
public class BookServiceGetNewBooksWithAppliedDiscountTest {

	private BookRepository bookRepository;

	private BookService bookService;

	@BeforeEach
	public void setUp() {
		bookRepository = Mockito.mock(BookRepository.class);
		bookService = new BookService(bookRepository);
	}

	@Test
	@Tag("valid")
	public void applyDiscountToMultipleNewBooks() {
		List<Book> books = new ArrayList<>();
		books.add(new Book("1", "Book One", 100, LocalDate.now()));
		books.add(new Book("2", "Book Two", 200, LocalDate.now()));

		when(bookRepository.findNewBooks(30)).thenReturn(books);

		List<Book> discountedBooks = bookService.getNewBooksWithAppliedDiscount(10, 30);

		assertThat(discountedBooks).hasSize(2);
		assertThat(discountedBooks.get(0).getPrice()).isEqualTo(90);
		assertThat(discountedBooks.get(1).getPrice()).isEqualTo(180);
	}

	@Test
    @Tag("valid")
    public void applyDiscountOnEmptyBookList() {
        when(bookRepository.findNewBooks(30)).thenReturn(new ArrayList<>());

        List<Book> discountedBooks = bookService.getNewBooksWithAppliedDiscount(10, 30);

        assertThat(discountedBooks).isEmpty();
    }

	@Test
	@Tag("valid")
	public void applyZeroPercentDiscount() {
		List<Book> books = new ArrayList<>();
		books.add(new Book("1", "Book One", 100, LocalDate.now()));
		books.add(new Book("2", "Book Two", 200, LocalDate.now()));

		when(bookRepository.findNewBooks(30)).thenReturn(books);

		List<Book> discountedBooks = bookService.getNewBooksWithAppliedDiscount(0, 30);

		assertThat(discountedBooks).hasSize(2);
		assertThat(discountedBooks.get(0).getPrice()).isEqualTo(100);
		assertThat(discountedBooks.get(1).getPrice()).isEqualTo(200);
	}

	@Test
	@Tag("invalid")
	public void applyNegativeDiscountRate() {
		List<Book> books = new ArrayList<>();
		books.add(new Book("1", "Book One", 100, LocalDate.now()));
		books.add(new Book("2", "Book Two", 200, LocalDate.now()));

		when(bookRepository.findNewBooks(30)).thenReturn(books);

		List<Book> discountedBooks = bookService.getNewBooksWithAppliedDiscount(-10, 30);

		assertThat(discountedBooks).hasSize(2);
		assertThat(discountedBooks.get(0).getPrice()).isEqualTo(110);
		assertThat(discountedBooks.get(1).getPrice()).isEqualTo(220);
	}

}