// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=addBook_2cb08502d1
ROOST_METHOD_SIG_HASH=addBook_515b5b18e8
"""
Scenario 1: Book Price is Less Than or Equal to 500
Details:
  TestName: addBookWithPriceLessThanOrEqualTo500.
  Description: This test is meant to check if the method addBook behaves correctly when the BookRequest price is less than or equal to 500. According to the method definition, it should simply return without making any changes if the price is less than or equal to 500.
  Execution:
    Arrange: Create a BookRequest object with the price of 500 or lesser.
    Act: Invoke the addBook method with the created BookRequest object.
    Assert: There should be no change in the BookRepository.
  Validation:
    This scenario verifies that the early return is functioning correctly for cases where the price is less than or equal to 500.
Scenario 2: Book Price is Greater Than 500
Details:
  TestName: addBookWithPriceGreaterThan500.
  Description: This test is meant to check if the method properly adds a new book to the repository under normal conditions.
  Execution:
    Arrange: Create a BookRequest object with a price of more than 500.
    Act: Invoke the addBook method with the BookRequest object.
    Assert: A new Book object should be added to the BookRepository with properties matching the given BookRequest.
  Validation:
  This check validates that when correct parameters are passed, the function works as expected and adds the book the BookRepository.
Scenario 3: BookRequest Object is Null
Details:
  TestName: addBookWithNullBookRequest.
  Description: This test is meant to check if the method behaves correctly when the given BookRequest is null. As the method does not seem to handle null values, this will likely throw a NullPointerException.
  Execution:
    Arrange: No particular arrangement necessary as the method will be invoked with a null argument.
    Act: Invoke the addBook method with null.
    Assert: Expect a NullPointerException to be thrown.
  Validation:
    This check verifies the error scenario where a null value is passed and the function does not handle it gracefully.
"""
*/
// ********RoostGPT********
package com.hubberspot.mockito.argument_matchers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;
import java.time.LocalDate;
import java.util.UUID;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.List;
import org.junit.jupiter.api.*;

@Tag("com.hubberspot.mockito.behavior.verification")
@Tag("com.hubberspot.mockito.behavior.verification.getPrice")
@Tag("com.hubberspot.mockito.behavior.verification.setTitle")
@Tag("com.hubberspot.mockito.behavior.verification.getTitle")
@Tag("com.hubberspot.mockito.behavior.verification.setPrice")
@Tag("com.hubberspot.mockito.behavior.verification.getPrice")
@Tag("com.hubberspot.mockito.behavior.verification.setPublishedDate")
@Tag("com.hubberspot.mockito.behavior.verification.getPublishedDate")
@Tag("com.hubberspot.mockito.behavior.verification.save")
@Tag("com.hubberspot.mockito.argument_matchers")
@Tag("com.hubberspot.mockito.argument_matchers.addBook")
@Tag("roostTest1")
@Tag("roostTest2")
public class BookServiceAddBook289Test {

	private BookService bookService;

	@Mock
	private BookRepository bookRepository;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.openMocks(this);
		this.bookService = new BookService(bookRepository);
	}

	@Test
	public void addBookWithPriceLessThanOrEqualTo500() {
		// arrange
		BookRequest bookRequest = new BookRequest("title", 500, LocalDate.of(2022, 1, 1));
		// act
		bookService.addBook(bookRequest);
		// assert
		verify(bookRepository, times(0)).save(any(Book.class));
	}

	@Test
	public void addBookWithPriceGreaterThan500() {
		// arrange
		BookRequest bookRequest = new BookRequest("title", 501, LocalDate.of(2022, 1, 1));
		ArgumentCaptor<Book> bookArgumentCaptor = ArgumentCaptor.forClass(Book.class);
		// act
		bookService.addBook(bookRequest);
		// assert
		verify(bookRepository, times(1)).save(bookArgumentCaptor.capture());
		assertEquals(bookArgumentCaptor.getValue().getTitle(), "title");
		assertEquals(bookArgumentCaptor.getValue().getPrice(), 501);
		assertEquals(bookArgumentCaptor.getValue().getPublishedDate(), LocalDate.of(2022, 1, 1));
	}

	@Test
	public void addBookWithNullBookRequest() {
		assertThrows(NullPointerException.class, () -> bookService.addBook(null));
	}

}