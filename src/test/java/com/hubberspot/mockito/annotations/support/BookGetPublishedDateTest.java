// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getPublishedDate_63b63e61a0
ROOST_METHOD_SIG_HASH=getPublishedDate_a965d099e3
"""
Scenario 1: Valid Check of Published Date
Details:
  TestName: testPublishedDateIsValid
  Description: This test is meant to validate if the method correctly returns the published date of a book.
  Execution:
    Arrange: Create a LocalDate object with a specific date to be associated with the book. Instantiate a book with the published date set to the created LocalDate object.
    Act: Invoke the getPublishedDate method from the book's instance.
    Assert: Use JUnit assertions to validate that the returned published date equals to the LocalDate that was initially set.
  Validation:
    Demonstrates that the method correctly retrieves the published date of a book. This can be crucial for sorting or filtering books based on their publication date.
Scenario 2: Check for a Null Published Date
Details:
  TestName: testPublishedDateIsNull
  Description: This test is meant to check if the method can handle scenarios when the published date is null. As the initial value of publishedDate is null, an unchecked getter might throw a NullPointerException.
  Execution:
    Arrange: Instantiate a book without setting the published date.
    Act: Invoke the getPublishedDate method from the book's instance.
    Assert: Use JUnit assertions to validate that a null value is returned.
  Validation:
    Shows that the method can robustly handle scenarios when the published date is null, which can help to avoid unnecessary system crashes due to NullPointerExceptions.
Scenario 3: Check if the Published Date is Immutable
Details:
  TestName: testPublishedDateIsImmutable
  Description: This test is meant to check if the returned published date is immutable. LocalDate is immutable, but a poor implementation could mistakenly return a mutable object.
  Execution:
    Arrange: Instantiate a book with a set published date.
    Act: Invoke the getPublishedDate method from the book's instance, and try to change the returned date.
    Assert: Use JUnit assertions expecting a UnsupportedOperationException to be thrown.
  Validation:
    Validates the immutability of the getPublishedDate method. This is crucial for preventing unintentional data changes in
    the application, leading to data consistency.
"""
*/
// ********RoostGPT********
package com.hubberspot.mockito.annotations.support;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.time.LocalDate;
import org.junit.jupiter.api.*;

@Tag("com.hubberspot.mockito.annotations.support")
@Tag("com.hubberspot.mockito.annotations.support.getPublishedDate")
@Tag("roostTest1")
@Tag("roostTest2")
public class BookGetPublishedDateTest {

	@Test
	public void testPublishedDateIsValid() {
		// arrange
		LocalDate expectedPublishedDate = LocalDate.of(2020, 1, 1);
		Book book = new Book();
		book.bookId = "1234";
		book.title = "Test Book";
		book.price = 100;
		book.publishedDate = expectedPublishedDate;
		// act
		LocalDate actualPublishedDate = book.getPublishedDate();
		// assert
		Assertions.assertEquals(expectedPublishedDate, actualPublishedDate, "The published date should be valid");
	}

	@Test
	public void testPublishedDateIsNull() {
		// arrange
		Book book = new Book();
		book.bookId = "1234";
		book.title = "Test Book";
		book.price = 100;
		book.publishedDate = null;
		// act
		LocalDate actualPublishedDate = book.getPublishedDate();
		// assert
		Assertions.assertNull(actualPublishedDate, "The published date should be null");
	}

	@Test
	public void testPublishedDateIsImmutable() {
		// arrange
		LocalDate publishedDate = LocalDate.of(2020, 1, 1);
		Book book = new Book();
		book.bookId = "1234";
		book.title = "Test Book";
		book.price = 100;
		book.publishedDate = publishedDate;
		// act
		LocalDate actualPublishedDate = book.getPublishedDate();
		// assert
		Assertions.assertThrows(UnsupportedOperationException.class, () -> actualPublishedDate.plusDays(1),
				"LocalDate should be immutable");
	}

}