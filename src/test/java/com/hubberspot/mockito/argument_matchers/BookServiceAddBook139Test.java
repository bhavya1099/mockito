// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=addBook_2cb08502d1
ROOST_METHOD_SIG_HASH=addBook_515b5b18e8
Scenario 1: Test for Book With Price Less Than or Equal to 500
Details:
  TestName: testBookWithPriceLessThanOrEqualTo500.
  Description: The test is to verify if the addBook method handles correctly for the scenario when the price of the book is less than or equal to 500.
Execution:
  Arrange: Create a BookRequest object with a price less than or equal to 500. Mock the BookRepository class.
  Act: Invoke the addBook method with the BookRequest object created.
  Assert: Verify that save method of bookRepository was not invoked (or verify that the book was not saved to the database).
Validation:
  The assertion aims to verify the method must not save the book if its price is less than or equal to 500. This verifies that the method adheres to the given business rule-scenario.
Scenario 2: Test for Book with Price Greater Than 500
Details:
  TestName: testBookWithPriceGreaterThan500.
  Description: The test is to verify if the addBook method handles correctly for the scenario when the price of the book is greater than 500.
Execution:
  Arrange: Create a BookRequest object with a price greater than 500 and other requisite details. Mock the BookRepository class.
  Act: Invoke addBook method with the BookRequest object created.
  Assert: Verify that save method of bookRepository was invoked with a Book object having same details as that of the BookRequest.
Validation:
  The assertion aims to verify the method must save the book if its price is greater than 500. This verifies that the method correctly adheres to the given business rule-scenario.
Scenario 3: Test for Null BookRequest Object
Details:
  TestName: testNullBookRequest.
  Description: The test is to verify if the addBook method handles correctly when a null BookRequest object is passed.
Execution:
  Arrange: Pass null as BookRequest and mock the BookRepository class.
  Act: Invoke addBook method with null object.
  Assert: Verify that the save method of bookRepository was not invoked.
Validation:
  The assertion aims to verify the method must not attempt to save a book or access fields of the BookRequest object if it is null. This reduces the risk of a Null Pointer Exception and verifies that the method handles null input correctly.
*/
// ********RoostGPT********
package com.hubberspot.mockito.argument_matchers;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.time.LocalDate;
import static org.mockito.Mockito.*;
import java.util.List;
import org.junit.jupiter.api.*;

@Tag("com.hubberspot.mockito.behavior.verification")
@Tag("com.hubberspot.mockito.behavior.verification.getPrice")
@Tag("com.hubberspot.mockito.behavior.verification.setTitle")
@Tag("com.hubberspot.mockito.behavior.verification.getTitle")
@Tag("com.hubberspot.mockito.behavior.verification.setPrice")
@Tag("com.hubberspot.mockito.behavior.verification.getPrice")
@Tag("com.hubberspot.mockito.behavior.verification.setPublishedDate")
@Tag("com.hubberspot.mockito.behavior.verification.getPublishedDate")
@Tag("com.hubberspot.mockito.behavior.verification.save")
@Tag("com.hubberspot.mockito.argument_matchers")
@Tag("com.hubberspot.mockito.argument_matchers.addBook")
@Tag("roostTest1")
@Tag("roostTest2")
public class BookServiceAddBook139Test {

	private BookService bookService;

	@Mock
	private BookRepository bookRepository;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);
		bookService = new BookService(bookRepository);
	}

	@Test
	public void testBookWithPriceLessThanOrEqualTo500() {
		// Arrange
		BookRequest bookRequest = new BookRequest("Java Programming", 500, LocalDate.of(2021, 3, 1));
		// Act
		bookService.addBook(bookRequest);
		// Assert
		verify(bookRepository, never()).save(any(Book.class));
	}

	@Test
	public void testBookWithPriceGreaterThan500() {
		// Arrange
		BookRequest bookRequest = new BookRequest("Advanced Java Programming", 600, LocalDate.of(2021, 3, 2));
		// Act
		bookService.addBook(bookRequest);
		// Assert
		verify(bookRepository, times(1)).save(argThat(book -> {
			return book.getTitle().equals(bookRequest.getTitle()) && book.getPrice() == bookRequest.getPrice()
					&& book.getPublishedDate().equals(bookRequest.getPublishedDate());
		}));
	}

	@Test
	public void testNullBookRequest() {
		// Act
		bookService.addBook(null);
		// Assert
		verify(bookRepository, never()).save(any(Book.class));
	}

}