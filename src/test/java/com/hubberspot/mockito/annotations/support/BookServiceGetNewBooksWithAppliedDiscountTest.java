// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type DBRX and AI Model meta-llama-3.1-70b-instruct-072424
ROOST_METHOD_HASH=getNewBooksWithAppliedDiscount_3b7d0e9aa8
ROOST_METHOD_SIG_HASH=getNewBooksWithAppliedDiscount_c27afe90dc
Here are the generated test scenarios for the `getNewBooksWithAppliedDiscount` method:
**Scenario 1: Happy Path - Discount Applied Successfully**
Details:
TestName: happyPathDiscountApplied
Description: Test that the method applies the discount correctly to the price of new books.
Execution:
Arrange:
* Create a mock `BookRepository` object that returns a list of new books with prices.
* Set up a discount rate of 10% and a duration of 30 days.
Act:
* Call `getNewBooksWithAppliedDiscount` with the discount rate and duration.
Assert:
* Verify that the prices of the returned books are updated with the applied discount.
Validation:
* This test ensures that the method correctly applies the discount to the prices of new books, which is the primary functionality of the method.
**Scenario 2: Edge Case - Zero Discount Rate**
Details:
TestName: zeroDiscountRate
Description: Test that the method returns the original prices when the discount rate is zero.
Execution:
Arrange:
* Create a mock `BookRepository` object that returns a list of new books with prices.
* Set up a discount rate of 0% and a duration of 30 days.
Act:
* Call `getNewBooksWithAppliedDiscount` with the discount rate and duration.
Assert:
* Verify that the prices of the returned books are the same as the original prices.
Validation:
* This test ensures that the method handles the edge case where the discount rate is zero and does not apply any discount.
**Scenario 3: Edge Case - Negative Discount Rate**
Details:
TestName: negativeDiscountRate
Description: Test that the method throws an exception when the discount rate is negative.
Execution:
Arrange:
* Create a mock `BookRepository` object that returns a list of new books with prices.
* Set up a discount rate of -10% and a duration of 30 days.
Act:
* Call `getNewBooksWithAppliedDiscount` with the discount rate and duration.
Assert:
* Verify that an exception is thrown (e.g., `IllegalArgumentException`).
Validation:
* This test ensures that the method handles the edge case where the discount rate is negative and throws an exception to indicate invalid input.
**Scenario 4: Edge Case - Zero Duration**
Details:
TestName: zeroDuration
Description: Test that the method returns an empty list when the duration is zero.
Execution:
Arrange:
* Create a mock `BookRepository` object that returns an empty list of new books.
* Set up a discount rate of 10% and a duration of 0 days.
Act:
* Call `getNewBooksWithAppliedDiscount` with the discount rate and duration.
Assert:
* Verify that an empty list is returned.
Validation:
* This test ensures that the method handles the edge case where the duration is zero and returns an empty list, as there are no new books within the specified duration.
**Scenario 5: Error Handling - BookRepository Returns Null**
Details:
TestName: bookRepositoryReturnsNull
Description: Test that the method handles the case where `bookRepository.findNewBooks` returns null.
Execution:
Arrange:
* Create a mock `BookRepository` object that returns null.
* Set up a discount rate of 10% and a duration of 30 days.
Act:
* Call `getNewBooksWithAppliedDiscount` with the discount rate and duration.
Assert:
* Verify that an exception is thrown (e.g., `NullPointerException`) or a default value is returned (e.g., an empty list).
Validation:
* This test ensures that the method handles the case where `bookRepository.findNewBooks` returns null, which could occur due to a database error or other unexpected issues.
**Scenario 6: Error Handling - BookRepository Throws Exception**
Details:
TestName: bookRepositoryThrowsException
Description: Test that the method handles the case where `bookRepository.findNewBooks` throws an exception.
Execution:
Arrange:
* Create a mock `BookRepository` object that throws an exception.
* Set up a discount rate of 10% and a duration of 30 days.
Act:
* Call `getNewBooksWithAppliedDiscount` with the discount rate and duration.
Assert:
* Verify that the exception is propagated to the caller or a default value is returned (e.g., an empty list).
Validation:
* This test ensures that the method handles the case where `bookRepository.findNewBooks` throws an exception, which could occur due to a database error or other unexpected issues.
These test scenarios cover various aspects of the `getNewBooksWithAppliedDiscount` method, including happy paths, edge cases, and error handling.
*/
// ********RoostGPT********
package com.hubberspot.mockito.annotations.support;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.doThrow;
import org.junit.jupiter.api.*;

@Tag("com.hubberspot.mockito.test_doubles.stub")
@Tag("com.hubberspot.mockito.test_doubles.stub.findNewBooks")
@Tag("com.hubberspot.mockito.behavior.verification")
@Tag("com.hubberspot.mockito.behavior.verification.getPrice")
@Tag("com.hubberspot.mockito.behavior.verification.setPrice")
@Tag("com.hubberspot.mockito.annotations.support")
@Tag("com.hubberspot.mockito.annotations.support.getNewBooksWithAppliedDiscount")
@ExtendWith(MockitoExtension.class)
public class BookServiceGetNewBooksWithAppliedDiscountTest {

	@Mock
	private BookRepository bookRepository;

	@InjectMocks
	private BookService bookService;

	@Test
	@Tag("valid")
	public void happyPathDiscountApplied() {
		// Arrange
		List<Book> newBooks = new ArrayList<>();
		newBooks.add(new Book("1", "Book1", 500, LocalDate.now()));
		newBooks.add(new Book("2", "Book2", 1000, LocalDate.now()));
		doReturn(newBooks).when(bookRepository).findNewBooks(anyInt());
		// Act
		List<Book> result = bookService.getNewBooksWithAppliedDiscount(10, 30);
		// Assert
		assertThat(result).hasSize(2);
		assertThat(result.get(0).getPrice()).isEqualTo(450);
		assertThat(result.get(1).getPrice()).isEqualTo(900);
	}

	@Test
	@Tag("boundary")
	public void zeroDiscountRate() {
		// Arrange
		List<Book> newBooks = new ArrayList<>();
		newBooks.add(new Book("1", "Book1", 500, LocalDate.now()));
		newBooks.add(new Book("2", "Book2", 1000, LocalDate.now()));
		doReturn(newBooks).when(bookRepository).findNewBooks(anyInt());
		// Act
		List<Book> result = bookService.getNewBooksWithAppliedDiscount(0, 30);
		// Assert
		assertThat(result).hasSize(2);
		assertThat(result.get(0).getPrice()).isEqualTo(500);
		assertThat(result.get(1).getPrice()).isEqualTo(1000);
	}

	@Test
	@Tag("invalid")
	public void negativeDiscountRate() {
		// Act and Assert
		assertThrows(IllegalArgumentException.class, () -> bookService.getNewBooksWithAppliedDiscount(-10, 30));
	}

	@Test
	@Tag("boundary")
	public void zeroDuration() {
		// Arrange
		doReturn(new ArrayList<>()).when(bookRepository).findNewBooks(0);
		// Act
		List<Book> result = bookService.getNewBooksWithAppliedDiscount(10, 0);
		// Assert
		assertThat(result).isEmpty();
	}

	@Test
	@Tag("integration")
	public void bookRepositoryReturnsNull() {
		// Arrange
		doReturn(null).when(bookRepository).findNewBooks(anyInt());
		// Act and Assert
		assertThrows(NullPointerException.class, () -> bookService.getNewBooksWithAppliedDiscount(10, 30));
	}

	@Test
	@Tag("integration")
	public void bookRepositoryThrowsException() {
		// Arrange
		doThrow(new RuntimeException()).when(bookRepository).findNewBooks(anyInt());
		// Act and Assert
		assertThrows(RuntimeException.class, () -> bookService.getNewBooksWithAppliedDiscount(10, 30));
	}

}