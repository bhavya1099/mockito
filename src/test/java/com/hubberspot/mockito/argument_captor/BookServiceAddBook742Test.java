// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=addBook_eabc174ed0
ROOST_METHOD_SIG_HASH=addBook_515b5b18e8
"""
Scenario 1: Valid Book data is saved in Repository
Details:
 TestName: saveValidBookInRepository
 Description: This test is meant to check if a valid book data is successfully saved into the repository. The target scenario here is when a BookRequest with valid fields is passed to addBook method.
Execution:
 Arrange: Mock the BookRequest with valid data and the BookRepository.
 Act: Invoke addBook method with the mock BookRequest.
 Assert: Verify that save method on the mocked BookRepository is invoked once.
Validation:
 This is to verify that the save operation is performed for a valid Book data. In the context of business logic, it ensures that valid book data is stored successfully in the repository.
Scenario 2: Book data with invalid title is not saved in Repository
Details:
 TestName: dontSaveBookWithInvalidTitle
 Description: Checking if a book with an invalid or null title is not saved into the repository. The target scenario here is when a BookRequest with null title is passed to addBook method.
Execution:
 Arrange: Mock the BookRequest with null or invalid title and the BookRepository.
 Act: Invoke addBook method with the mock BookRequest.
 Assert: Verify that save method on the mocked BookRepository is not invoked.
Validation:
 The assertion aims to verify that the save operation is not performed for an invalid Book data. It ensures the application doesn't store invalid data into the repository.
Scenario 3: Book data with invalid price is not saved in Repository
Details:
 TestName: dontSaveBookWithInvalidPrice
 Description: Checking if a book with a invalid or negative price is not saved into the repository. The target scenario here is when a BookRequest with invalid price is passed to addBook method.
Execution:
 Arrange: Mock the BookRequest with invalid or negative price and the BookRepository.
 Act: Invoke addBook method with the mock BookRequest.
 Assert: Verify that save method on the mocked BookRepository is not invoked.
Validation:
 This is to confirm that the save operation is not performed for a Book data with invalid price. It ensures that the application doesn't store such invalid data in the repository.
Scenario 4: Book data with null publish date is not saved in Repository
Details:
 TestName: dontSaveBookWithNullPublishDate
 Description: Checking if a book with null published date is not saved in the repository. The target scenario here is when a BookRequest with null published date is passed to addBook method.
Execution:
 Arrange: Mock the BookRequest with null published date and the BookRepository.
 Act: Invoke addBook method with the mock BookRequest.
 Assert: Verify that save method on the mocked BookRepository is not invoked.
Validation:
 This assertion confirms that book data with null published date is not saved in the repository. This test is significant as it prevents the storage of incomplete book data in the repository.
"""
*/
// ********RoostGPT********
package com.hubberspot.mockito.argument_captor;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.time.LocalDate;
import org.junit.jupiter.api.*;

@Tag("com.hubberspot.mockito.behavior.verification")
@Tag("com.hubberspot.mockito.behavior.verification.setTitle")
@Tag("com.hubberspot.mockito.behavior.verification.getTitle")
@Tag("com.hubberspot.mockito.behavior.verification.setPrice")
@Tag("com.hubberspot.mockito.behavior.verification.getPrice")
@Tag("com.hubberspot.mockito.behavior.verification.setPublishedDate")
@Tag("com.hubberspot.mockito.behavior.verification.getPublishedDate")
@Tag("com.hubberspot.mockito.behavior.verification.save")
@Tag("com.hubberspot.mockito.argument_captor")
@Tag("com.hubberspot.mockito.argument_captor.addBook")
@Tag("roostTest1")
@Tag("roostTest2")
class BookServiceAddBook742Test {

	@Mock
	private BookRepository bookRepository;

	private BookService bookService;

	@BeforeEach
	void setUp() {
		MockitoAnnotations.initMocks(this);
		bookService = new BookService(bookRepository);
	}

	@Test
	void saveValidBookInRepository() {
		// Arrange
		String title = "Test Book";
		int price = 120;
		LocalDate publishedDate = LocalDate.now();
		BookRequest bookRequest = new BookRequest(title, price, publishedDate);

		// Act
		bookService.addBook(bookRequest);

		// Assert
		verify(bookRepository, times(1)).save(any());
	}

	@Test
	void dontSaveBookWithInvalidTitle() {
		// Arrange
		int price = 120;
		LocalDate publishedDate = LocalDate.now();
		BookRequest bookRequest = new BookRequest(null, price, publishedDate);

		// Act
		bookService.addBook(bookRequest);

		// Assert
		verify(bookRepository, times(0)).save(any());
	}

	@Test
	void dontSaveBookWithInvalidPrice() {
		// Arrange
		String title = "Test Book";
		LocalDate publishedDate = LocalDate.now();
		BookRequest bookRequest = new BookRequest(title, -120, publishedDate);

		// Act
		bookService.addBook(bookRequest);

		// Assert
		verify(bookRepository, times(0)).save(any());
	}

	@Test
	void dontSaveBookWithNullPublishDate() {
		// Arrange
		String title = "Test Book";
		int price = 120;
		BookRequest bookRequest = new BookRequest(title, price, null);

		// Act
		bookService.addBook(bookRequest);

		// Assert
		verify(bookRepository, times(0)).save(any());
	}

}