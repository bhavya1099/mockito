// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=setDigital_952718b46e
ROOST_METHOD_SIG_HASH=setDigital_e5b0a1545f
"""
Scenario 1: Check if the value of isDigital is being set properly
Details:
  TestName: setDigitalValueAsTrue
  Description: This test is meant to check the functionality that sets the isDigital variable to true. The scenario targets when the isDigital value must be changed to true.

Execution:
   Arrange: Initialize a class object and set the isDigital variable to 'false' or 'null' initially.
   Act: Invoke the setDigital method with the parameter 'true'.
   Assert: Use JUnit assertions to check if the isDigital value has been updated to 'true'.

Validation:
   The assertion aims to confirm if the isDigital value changes from its initial value to 'true'. The expected result is 'true' based on the parameter passed for the method. This test is significant to ensure that the isDigital status of the book can be updated successfully.
Scenario 2: Check if the value of isDigital is being set properly
Details:
  TestName: setDigitalValueAsFalse
  Description: This test is meant to check the functionality that sets the isDigital variable to false. The scenario targets when the isDigital value must be changed to false.

Execution:
   Arrange: Initialize a class object and set the isDigital variable to 'true' or 'null' initially.
   Act: Invoke the setDigital method with the parameter 'false'.
   Assert: Use JUnit assertions to check if the isDigital value has been updated to 'false'.

Validation:
   The assertion aims to confirm if the isDigital value changes from its initial value to 'false'. The expected result is 'false' based on the parameter passed for the method. This test is significant to ensure that the isDigital status of the book can be updated successfully.
Scenario 3: Check if the value of isDigital is not changed when the same value is set again
Details:
  TestName: setDigitalValueAsSameValue
  Description: This test is meant to check whether the value of isDigital remains same when set to the same value again. The scenario targets when the isDigital value is not changed.

Execution:
   Arrange: Initialize a class object and set the isDigital variable to 'true' or 'false' initially.
   Act: Invoke the setDigital method with the parameter as the same initial value.
   Assert: Use JUnit assertions to check if the isDigital value remains the same.

Validation:
    The assertion aims to verify if the isDigital value remains the same when attempted to set with the same value. The expected result is the same initial value which is significant to ensure that redundant operations do not affect the state of the object.
"""
*/
// ********RoostGPT********
package com.hubberspot.mockito.argument_matchers;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.time.LocalDate;
import java.util.Objects;
import org.junit.jupiter.api.*;

@Tag("com.hubberspot.mockito.argument_matchers")
@Tag("com.hubberspot.mockito.argument_matchers.setDigital")
@Tag("roostTest1")
@Tag("roostTest2")
public class BookSetDigitalTest {

	@Test
	public void setDigitalValueAsTrue() {
		Book book = new Book();
		book.setDigital(true);
		assertTrue(book.isDigital(), "The value of isDigital should be true");
	}

	@Test
	public void setDigitalValueAsFalse() {
		Book book = new Book();
		book.setDigital(false);
		assertFalse(book.isDigital(), "The value of isDigital should be false");
	}

	@Test
	public void setDigitalValueAsSameValue() {
		Book book = new Book();
		book.setDigital(true);
		book.setDigital(true);
		assertTrue(book.isDigital(), "The value of isDigital should remain true");

		book.setDigital(false);
		book.setDigital(false);
		assertFalse(book.isDigital(), "The value of isDigital should remain false");
	}

}