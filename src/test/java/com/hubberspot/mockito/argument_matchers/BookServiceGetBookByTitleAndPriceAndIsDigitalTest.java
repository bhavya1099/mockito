// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getBookByTitleAndPriceAndIsDigital_8cac1b5ded
ROOST_METHOD_SIG_HASH=getBookByTitleAndPriceAndIsDigital_af372a2dbe
"""
  Scenario 1: Correct Book returned by Matching Title, Price and IsDigital status
  Details:
    TestName: testReturnedBookWithMatchingTitlePriceIsDigital.
    Description: The test is meant to verify if a correct book data is returned when searching it by title, price, and its digital status.
  Execution:
    Arrange: Mock the book repository to return a book when the matching title, price and isDigital information is given.
    Act: Invoke the getBookByTitleAndPriceAndIsDigital() method with a specific title, price, and isDigital status.
    Assert: Check if the returned book matches the one expected from the repository.
  Validation:
    This assertion examines the retrieval of a single book by title, price, and digital status. A successful result confirms the correct working of the getBookByNameAndPriceAndIsDigital() method.
  Scenario 2: No book returned when no match for the provided Title, Price and IsDigital status
  Details:
    TestName: testNoBookReturnedWithMismatchingTitlePriceIsDigital.
    Description: The scenario checks if no book is returned in case of no matching title, price and isDigital status in the repository.
  Execution:
    Arrange: Mock the book repository to return null when a non-matching title, price, and isDigital information is given.
    Act: Invoke the getBookByTitleAndPriceAndIsDigital() method with a mismatching title, price and isDigital status.
    Assert: Validate that the response from the method is null.
  Validation:
    This assertion verifies if the method correctly handles a situation where no book data matches the provided criteria. The scenario validates the robustness of the retrieval mechanism of the system.
  Scenario 3: Exception thrown when title Provided is null
  Details:
    TestName: testNullExceptionOnNullTitle.
    Description: The test is intended to check if the correct exception is thrown when the provided title is null.
  Execution:
    Arrange: No need to mock the repository in this case.
    Act: Invoke the getBookByTitleAndPriceAndIsDigital() method with the title as null.
    Assert: Check if the correct exception is thrown.
  Validation:
    This assertion aims to verify the method's ability to handle exceptional inputs, in this case, a null title, thus improving reliability and stability.
"""
*/
// ********RoostGPT********
package com.hubberspot.mockito.argument_matchers;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;
import java.time.LocalDate;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.util.List;
import org.junit.jupiter.api.*;

@Tag("com.hubberspot.mockito.argument_matchers")
@Tag("com.hubberspot.mockito.argument_matchers.getBookByTitleAndPriceAndIsDigital")
@Tag("com.hubberspot.mockito.argument_matchers.findBookByTitleAndPriceAndIsDigital")
@Tag("roostTest1")
@Tag("roostTest2")
@ExtendWith(MockitoExtension.class)
public class BookServiceGetBookByTitleAndPriceAndIsDigitalTest {

	@Mock
	private BookRepository bookRepository;

	@InjectMocks
	private BookService bookService;

	private Book expectedBook;

	@BeforeEach
	void setUp() {
		expectedBook = new Book("1", "The Book Title", 500, LocalDate.now(), true);
	}

	@Test
    public void testReturnedBookWithMatchingTitlePriceIsDigital() {
        when(bookRepository.findBookByTitleAndPriceAndIsDigital(anyString(), anyInt(), anyString())).thenReturn(expectedBook);
        Book actualBook = bookService.getBookByTitleAndPriceAndIsDigital("The Book Title", 500, true);
        assertThat(actualBook).isNotNull();
        assertThat(actualBook).isEqualToComparingFieldByField(expectedBook);
    }

	@Test
    public void testNoBookReturnedWithMismatchingTitlePriceIsDigital() {
        when(bookRepository.findBookByTitleAndPriceAndIsDigital(anyString(), anyInt(), anyString())).thenReturn(null);
        Book actualBook = bookService.getBookByTitleAndPriceAndIsDigital("Mismatch Title", 5000, false);
        assertThat(actualBook).isNull();
    }

	@Test
	public void testNullExceptionOnNullTitle() {
		assertThrows(NullPointerException.class, () -> bookService.getBookByTitleAndPriceAndIsDigital(null, 500, true));
	}

}